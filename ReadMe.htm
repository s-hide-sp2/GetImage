test_commit1

<!--このヘルプ ファイルの内容を表示するには、
ソリューション エクスプローラ ペインでファイルを右クリックし、
[ブラウザで表示] をクリックしてください。-->

<html><head><title>GetImage サンプル : Windows Image Acquisition API の例</title></head><body><h1>GetImage サンプル : Windows Image Acquisition API の例</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><h1 class="heading" >
  サンプル ファイル :
</h1><p /><p>GetImage サンプルでは、WIA (Windows Image Acquisition) アプリケーション プログラミング インターフェイス (API: Application Programming Interface) の例を示します。</p><p>WIA API のセットにはファイル転送に必要な単純な API が含まれますが、インメモリ転送に必要な単純な API 呼び出しはありません。GetImage は WiaGetImage という名前のラッパー関数を実装し、SelectDeviceDlg、DeviceDlg、idtGetBandedData の各 API の機能を組み合わせて、イメージの取得を 1 つの関数呼び出し内に完全にカプセル化します。</p><p>このサンプルは、コード自体が主な機能となっています。WiaWrap、EventCallback、DataCallback、BitmapUtil、ProgressDlg の各ファイルは、インメモリ イメージ転送の正しい実装方法を示します。この概要の後半にある「WIA API を使用したプログラミングに関する注意事項」セクションでは、WIA アプリケーション作成時の共通の落とし穴について詳しく説明し、サンプルにはその処理方法を示します。このサンプルを参照用として読み込むか、またはサンプル コードをライブラリとして直接使用できます。各関数の使い方については、ヘッダー ファイルのコメントで詳しく説明しています。</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">セキュリティに関するメモ </th></tr><tr><td><p>このサンプル コードは概念を示す目的で提供されているものです。必ずしも最も安全なコーディング手法に従っているわけではないので、アプリケーションまたは Web サイトでは使用しないでください。Microsoft は、サンプル コードが意図しない目的で使用された場合に、付随的または間接的な損害について責任を負いません。</p></td></tr></table></div><h1 class="heading">必要条件</h1><div id="requirementsSection" class="section"><p>このサンプルを実行できるのは、Windows XP 以降です。</p><p>また、Microsoft プラットフォーム SDK をインストールしている必要があります。</p></div><h1 class="heading">サンプルのビルドと実行</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h3 class="subHeading">このサンプルをビルドして実行するには</h3><div class="subSection"><ol><li><p>Visual Studio で、ソリューション GetImage.sln を読み込みます。 </p></li><li><p>ソリューション エクスプローラで、プロジェクトを右クリックし、[プロパティ] をクリックします。次のプロパティを設定します。 </p><ul><li><p>
[全般] プロパティ ページ ([C++] フォルダ) : [追加のインクルード ディレクトリ] プロパティを変更して、プラットフォーム SDK のヘッダー ファイルを含むディレクトリ (c:\Microsoft Platform SDK\include など) を追加します。</p></li><li><p>
[全般] プロパティ ページ ([リンカ] フォルダ) : [追加のライブラリ ディレクトリ] プロパティを変更して、プラットフォーム SDK のライブラリ ファイルを含むディレクトリ (c:\Microsoft Platform SDK\lib など) を追加します。 </p></li></ul></li><li><p>[ビルド] メニューの [ビルド] をクリックします。 </p></li><li><p>[デバッグ] メニューの [デバッグなしで開始] をクリックします<b></b>。</p></li></ol></div><p>サンプル アプリケーションの [File] メニューには、[From scanner or camera] という名前のコマンドが 1 つあります。WIA デバイス (またはデバイス エミュレータ) を接続すると、メニュー項目が有効になります。ユーザーがメニュー コマンドを選択すると、[WIA Device Selection]、[Image Selection]、[Image Transfer] の各ダイアログ ボックスが連続して表示されます。デバイスとイメージの選択ダイアログ ボックスはシステムに用意されている共通のダイアログ ボックスであり、転送ダイアログ ボックスはこのサンプルに実装されます。最後に、転送されたイメージが子ウィンドウに表示されます。 </p></div><h1 class="heading">サンプル内のファイル</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr><th>
ファイル
            </th><th>
説明
            </th></tr><tr><td><p>WiaWrap.cpp</p></td><td><p>より単純な WIA 操作に必要なラッパー関数が含まれます。</p></td></tr><tr><td><p>WiaWrap.h</p></td><td><p>WiaWrap.cpp のヘッダー ファイルです。</p></td></tr><tr><td><p>EventCallback.cpp</p></td><td><p>WIA デバイスのイベントに必要なコールバック関数を実装します。</p></td></tr><tr><td><p>EventCallback.h</p></td><td><p>EventCallback.cpp のヘッダー ファイルです。</p></td></tr><tr><td><p>DataCallback.cpp</p></td><td><p>データ転送に必要なコールバック関数を実装します。</p></td></tr><tr><td><p>DataCallback.h</p></td><td><p>DataCallback.cpp のヘッダー ファイルです。</p></td></tr><tr><td><p>BitmapUtil.cpp</p></td><td><p>デバイスに依存しないビットマップ (DIB: Device Independent Bitmap) 関数が含まれます。</p></td></tr><tr><td><p>BitmapUtil.h</p></td><td><p>BitmapUtil.cpp のヘッダー ファイルです。</p></td></tr><tr><td><p>ProgressDlg.cpp</p></td><td><p>単純なプログレス ダイアログ ボックスを実装します。</p></td></tr><tr><td><p>ProgressDlg.h</p></td><td><p>ProgressDlg.cpp のヘッダー ファイルです。</p></td></tr><tr><td><p>GetImage.cpp</p></td><td><p>アプリケーションのメイン エントリ ポイントを実装します。</p></td></tr><tr><td><p>GetImage.rc</p></td><td><p>プロジェクトのリソースが含まれます。</p></td></tr><tr><td><p>resource.h</p></td><td><p>リソース識別子のヘッダー ファイルです。</p></td></tr><tr><td><p>MainWnd.cpp</p></td><td><p>メイン フレーム ウィンドウを実装します。</p></td></tr><tr><td><p>MainWnd.h</p></td><td><p>MainWnd.cpp のヘッダー ファイルです。</p></td></tr><tr><td><p>BitmapWnd.cpp</p></td><td><p>イメージ表示ウィンドウを実装します。</p></td></tr><tr><td><p>BitmapWnd.h</p></td><td><p>BitmapWnd.cpp のヘッダー ファイルです。</p></td></tr><tr><td><p>StdAfx.cpp</p></td><td><p>プリコンパイル済みヘッダー ファイルです。</p></td></tr><tr><td><p>StdAfx.h</p></td><td><p>頻繁に使用される標準のシステム ファイルが含まれます。</p></td></tr></table></div></div><h1 class="heading">WIA API を使用したプログラミングに関する注意事項</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>[File] メニューの [From Scanner or Camera...] というメニュー項目を使用して、アプリケーションでデバイスとイメージを選択できるようにすることをお勧めします。システムに WIA デバイスがない場合は、このメニュー項目が淡色表示されていることがあります。 </p><p>アプリケーションを開発する場合は、シリアル接続のカメラと USB 接続のカメラ、およびスクロール フィード型の ADF フラットベッド スキャナを使用して、アプリケーションをテストすることをお勧めします。テストには、Windows DDK で利用可能なソフトウェア専用デバイス エミュレータも使用できます。 </p><p>通常、スクロール フィード型のスキャナでは、データ転送の開始時にイメージの高さを認識できません。したがって、ビットマップ ヘッダーのイメージのサイズとイメージの高さについて 0 が返されることがあります。この場合、新しいデータの到着時にコールバック関数によってバッファを拡張したり、転送の完了時に高さを明示的に計算したりする必要があります。</p><p>ADF (Automatic Document Feeder) で DeviceDlg API を使用する場合、API は ADF を 1 ページ分スキャンするように設定します。複数のページをスキャンする場合は、アプリケーションで WIA_DPS_PAGES を必要なページ数または ALL_PAGES 値に明示的に設定する必要があります。</p><p>ユーザーがキャンセルした場合は、SelectDeviceDlg、DeviceDlg、idtGetData、idtGetBandedData の各 API から S_FALSE が返されます。この場合、SUCCEEDED マクロを使用して戻り値をチェックするだけでは不十分です。プログラマが S_FALSE を明示的にチェックする必要があります。同様に、関数の引数が正しい場合には ReadMultiple と WriteMultiple の各 API から S_FALSE が返されますが、その関数は要求された操作を実行できません。この場合、プログラマは S_FALSE に対する戻り値を明示的にチェックする必要があります。</p><p>キャンセルできるプログレス ダイアログ ボックスをアプリケーションで表示する場合は、そのダイアログ ボックスを別のスレッドに表示する必要があります。データ転送スレッドは転送が完了するまでブロックされるため、到着したウィンドウ メッセージはすぐに処理できません。同じスレッドで作成されたプログレス ダイアログ ボックスおよびその [Cancel] ボタンは、ユーザーの入力に対する反応が遅くなります。</p><p>データ転送をキャンセルできるのは、BandedDataCallback が戻るときだけです。BandedDataCallback は数秒単位で呼び出されることがあるため、アプリケーションではキャンセル操作が実行中であることをユーザーに対して示す必要があります。たとえば、[Cancel] ボタンを無効にしたり、待機メッセージを表示したりできます。</p></div><h1 class="heading">キーワード</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><p>このサンプルでは、次のキーワードを使用します。</p><p>IWiaDevMgr、IWiaDevMgr::SelectDeviceDlg、IWiaEventCallback、IWiaEventCallback::ImageEventCallback、IWiaItem、IWiaItem::DeviceDlg、IWiaPropertyStorage、IWiaPropertyStorage::ReadMultiple、IWiaPropertyStorage::WriteMultiple、IWiaDataTransfer、IWiaDataTransfer::idtGetBandedData、IWiaDataCallback、IWiaDataCallback::BandedDataCallback</p></div><h1 class="heading"><span id="seeAlsoNoToggle">参照</span></h1></div><div id="footer"><div class="footerLine"></div>
        このトピックについてのご提案や障害報告をお送りいただく場合は、<a href="http://go.microsoft.com/fwlink/?linkid=53178">こちら</a>を参照してください。
      </div></div></body></html>
